---
name: Functional Tests

on:
  pull_request:
    types: [opened]

jobs:
  test-reviewers-file:
    name: Test REVIEWERS file
    if: ${{ startsWith(github.event.pull_request.title, '[automation]') }}
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_PR_ACCESS_ID }}
          private-key: ${{ secrets.APP_PR_ACCESS_PRIVATE_KEY }}
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
      - name: Assign reviewers
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
      - name: Validate assigned reviewers
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const { users } = await github.rest.pulls.listRequestedReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            const EXPECTED_USERS = ['animewka', 'Sasha4e'];
            if (users.length != EXPECTED_USERS.length) {
              core.setFailed(`Expected amount of users: ${EXPECTED_USERS.length}. Actual: ${users.length}`);
            }
            if (JSON.stringify(EXPECTED_USERS.sort()) !== JSON.stringify(users.sort())) {
              core.setFailed(`Expected users: ${EXPECTED_USERS}. Actual: ${users}`);
            }
      - name: Close PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              state: 'closed'
            });
